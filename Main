package com.Relearn;

//The StringBuilder is a mutable alternative to 'String'
public class Main {

    public static void main(String[] args) {
	// write your code here

        String helloWorld = "hello, " + "World!";
        helloWorld.concat(" And goodbye");

//        StringBuilder helloWorldBuilder = "hello," + " World!";  -> an error. String Builder is to be used as a 'new' class
        StringBuilder helloWorldBuilder = new StringBuilder("hello," + " World!");
        helloWorldBuilder.append(" And goodbye");

        printInformation(helloWorld);
        printInformation(helloWorldBuilder);

        //      without assigning this to a variable, like so -> helloWorld = helloWorld.concat(" And goodbye");
        //The string helloWorld will just be 'hello, World!' Because for after the concat, a new object was created. the String method creates a new object in memory, and returns a reference to it...
        //The StringBuilder works just fine. It changes, and the method returns a reference to itself. So you can call methods with the StringBuilder class without reassigning values. They return this self reference to support chaining methods


        StringBuilder emptryStart = new StringBuilder(); // -> by default, the capacity is 16, before it requests more storage
        emptryStart.append("a".repeat(18));
        StringBuilder emptyStart32  = new StringBuilder(32); // -> StringBuilder(capacity). It will hold 32 characters before requesting more memory

        printInformation(emptryStart);
        printInformation(emptyStart32);
        //Anytime a StringBuilder class requests more capacity, the data it holds gets copied to the larger storage area


        //StringBuilder Methods ()=>
        StringBuilder builderPlus = new StringBuilder("Hello" + " World!");
        builderPlus.append(" And Goodbye!");

        builderPlus.deleteCharAt(17).insert(17, 'g'); //-> Method chaining.
        //-> deleteCharAt(index)        .insert(offset, char);
        System.out.println(builderPlus);

        builderPlus.replace(17, 18, "G");
        //->    .replace[startIndex, endIndex, String]
        System.out.println(builderPlus);

        builderPlus.reverse().setLength(8); //-> Method chaining - one method calling another.
        //reverses, and sets the length to eight.
        System.out.println(builderPlus);
    }

    //We'll create two overloaded methods to test both classes
    public static void printInformation(String string){
        System.out.println("parsed string = " + string);
        System.out.println("length of parsed string = " + string.length());

        System.out.println();
    }

    public static void printInformation(StringBuilder stringBuilder){
        System.out.println("parsed stringBuilder = " + stringBuilder);
        System.out.println("length of parsed stringBuilder = " + stringBuilder.length());
        System.out.println("Capacity = " + stringBuilder.capacity());

        System.out.println();
    }
}
